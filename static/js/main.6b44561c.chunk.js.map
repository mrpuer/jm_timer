{"version":3,"sources":["utils.js","Buttons.jsx","Timer.jsx","CountdownInput.jsx","CountdownRes.jsx","Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["minutesFromSec","sec","Math","floor","extractsSeconds","playNotification","a","audio","Audio","play","Buttons","status","stopTimer","pauseTimer","startTimer","disabled","type","onClick","defaultProps","Timer","props","startTime","Date","now","setState","isActive","id","setInterval","state","currentCount","counted","intervalId","clearInterval","this","longMs","ms","msToSeconds","React","Component","CountdownInput","secondsCount","setStartCount","justify","span","min","max","style","marginLeft","value","onChange","secondsValue","minutesValue","step","tooltipVisible","CountdownRes","fullTimeCount","currentPercent","marginTop","percent","Countdown","newValue","startCountdown","endTimeSeconds","then","stopCountdown","countId","pauseCountdown","padding","TabPane","Tabs","Content","Layout","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b44561c.chunk.js","sourcesContent":["export const minutesFromSec = sec => Math.floor(sec / 60);\nexport const extractsSeconds = sec => sec % 60;\nexport const msToSeconds = ms => Math.floor((ms / 1000) % 60);\nexport const msToMinutes = ms => Math.floor(ms / 60000);\nexport const extractMs = longMs => Math.floor((longMs % 1000) / 100);\nexport const playNotification = async () => {\n  const audio = new Audio('notify.mp3');\n  await audio.play();\n};\n","import React from 'react';\nimport { Button, Row } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst Buttons = ({ status, stopTimer, pauseTimer, startTimer, disabled }) => {\n  return (\n    <Row>\n      <Button\n        type=\"primary\"\n        onClick={status === 'on' ? pauseTimer : startTimer}\n        disabled={disabled}\n      >\n        {status === 'on' ? 'Pause' : 'Start'}\n      </Button>\n      <Button type=\"danger\" onClick={stopTimer} disabled={disabled}>\n        Reset\n      </Button>\n    </Row>\n  );\n};\n\nButtons.propTypes = {\n  status: PropTypes.string,\n  stopTimer: PropTypes.func.isRequired,\n  pauseTimer: PropTypes.func.isRequired,\n  startTimer: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nButtons.defaultProps = {\n  status: 'off',\n  disabled: false,\n};\n\nexport default Buttons;\n","import React from 'react';\nimport { msToSeconds, msToMinutes, extractMs } from './utils';\nimport Buttons from './Buttons';\n\nexport default class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCount: 0,\n      counted: 0,\n      intervalId: null,\n    };\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  startTimer = () => {\n    const startTime = Date.now();\n    this.setState({ isActive: 'on' });\n    const id = setInterval(() => {\n      this.setState(state => {\n        return {\n          currentCount: state.counted + (Date.now() - startTime),\n        };\n      });\n    }, 1);\n    this.setState({ intervalId: id });\n  };\n\n  pauseTimer = () => {\n    const { intervalId, currentCount } = this.state;\n    clearInterval(intervalId);\n    this.setState({ isActive: 'off', counted: currentCount });\n  };\n\n  stopTimer = () => {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n    this.setState({ currentCount: 0, isActive: 'off', counted: 0 });\n  };\n\n  render() {\n    const { currentCount, isActive } = this.state;\n    return (\n      <div>\n        <h2>\n          <span>{msToMinutes(currentCount)} : </span>\n          <span>{msToSeconds(currentCount)} : </span>\n          <span>{extractMs(currentCount)}</span>\n        </h2>\n        <Buttons\n          status={isActive}\n          pauseTimer={this.pauseTimer}\n          startTimer={this.startTimer}\n          stopTimer={this.stopTimer}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber, Row, Col } from 'antd';\nimport { extractsSeconds, minutesFromSec } from './utils';\n\nconst CountdownInput = ({ status, secondsCount, setStartCount }) => {\n  const onChangeMinutes = value => {\n    const secondsValue = extractsSeconds(secondsCount);\n    if (typeof value === 'number' && value <= 60) setStartCount(value * 60 + secondsValue);\n  };\n\n  const onChangeSeconds = value => {\n    const minutesValue = minutesFromSec(secondsCount);\n    if (typeof value === 'number' && value <= 60) setStartCount(minutesValue * 60 + value);\n  };\n\n  const onChangeSlider = value => {\n    setStartCount(value);\n  };\n\n  return (\n    <>\n      <Row type=\"flex\" justify=\"center\">\n        <Col span={3}>\n          <InputNumber\n            min={0}\n            max={60}\n            style={{ marginLeft: 16 }}\n            value={minutesFromSec(secondsCount)}\n            disabled={status !== 'off'}\n            onChange={onChangeMinutes}\n          />{' '}\n          Minutes\n        </Col>\n        <Col span={3}>\n          <InputNumber\n            min={0}\n            max={60}\n            style={{ marginLeft: 16 }}\n            value={extractsSeconds(secondsCount)}\n            disabled={status !== 'off'}\n            onChange={onChangeSeconds}\n          />{' '}\n          Seconds\n        </Col>\n      </Row>\n      <Row type=\"flex\" justify=\"center\">\n        <Col span={8}>\n          <Slider\n            min={0}\n            max={3600}\n            step={15}\n            tooltipVisible={false}\n            disabled={status !== 'off'}\n            onChange={onChangeSlider}\n            value={secondsCount}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nCountdownInput.propTypes = {\n  status: PropTypes.string,\n  secondsCount: PropTypes.number,\n  setStartCount: PropTypes.func.isRequired,\n};\n\nCountdownInput.defaultProps = {\n  status: 'off',\n  secondsCount: 0,\n};\n\nexport default CountdownInput;\n","import React from 'react';\nimport { Col, Progress, Row, Card } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst CountdownRes = props => {\n  const { secondsCount, fullTimeCount } = props;\n  const currentPercent = Math.floor((secondsCount * 100) / fullTimeCount);\n\n  return (\n    <Card style={{ marginTop: '50px' }}>\n      <Row type=\"flex\" justify=\"center\">\n        <Col span={8}>\n          <h2>\n            {Math.floor(secondsCount / 60)} min {secondsCount % 60} sec\n          </h2>\n          <Progress percent={currentPercent} status=\"active\" />\n        </Col>\n      </Row>\n    </Card>\n  );\n};\n\nCountdownRes.propTypes = {\n  secondsCount: PropTypes.number,\n  fullTimeCount: PropTypes.number,\n};\n\nCountdownRes.defaultProps = {\n  secondsCount: 0,\n  fullTimeCount: 0,\n};\n\nexport default CountdownRes;\n","import React from 'react';\nimport { playNotification } from './utils';\n\nimport CountdownInput from './CountdownInput';\nimport CountdownRes from './CountdownRes';\nimport Buttons from './Buttons';\n\nexport default class Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      secondsCount: 0,\n      fullTimeCount: 0,\n      status: 'off',\n      countId: 0,\n    };\n  }\n\n  componentWillUnmount() {\n    this.stopCountdown();\n  }\n\n  setStartCount = newValue => {\n    this.setState({ secondsCount: newValue, fullTimeCount: newValue });\n  };\n\n  startCountdown = () => {\n    const { secondsCount } = this.state;\n    const endTimeSeconds = Math.floor(Date.now() / 1000) + secondsCount;\n    const id = setInterval(() => {\n      const { secondsCount: currentSecondsCount } = this.state;\n      if (currentSecondsCount <= 1) {\n        playNotification().then(() => this.stopCountdown());\n      } else {\n        this.setState({ secondsCount: endTimeSeconds - Math.floor(Date.now() / 1000) });\n      }\n    }, 1000);\n    this.setState({ countId: id, status: 'on' });\n  };\n\n  stopCountdown = () => {\n    const { countId } = this.state;\n    clearInterval(countId);\n    this.setState({ countId: 0, status: 'off', secondsCount: 0, fullTimeCount: 0 });\n  };\n\n  pauseCountdown = () => {\n    const { countId } = this.state;\n    clearInterval(countId);\n    this.setState({ countId: 0, status: 'pause' });\n  };\n\n  render() {\n    const { secondsCount, fullTimeCount, status } = this.state;\n    return (\n      <div style={{ padding: '30px' }}>\n        <CountdownInput\n          status={status}\n          setStartCount={this.setStartCount}\n          secondsCount={secondsCount}\n        />\n        <CountdownRes secondsCount={secondsCount} fullTimeCount={fullTimeCount} />\n        <Buttons\n          status={status}\n          startTimer={this.startCountdown}\n          stopTimer={this.stopCountdown}\n          pauseTimer={this.pauseCountdown}\n          disabled={fullTimeCount === 0}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Tabs, Layout } from 'antd';\n\nimport Timer from './Timer';\nimport Countdown from './Countdown';\nimport './App.scss';\n\nconst { TabPane } = Tabs;\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <Content>\n      <h1>Timer & Countdown React App</h1>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <Countdown />\n        </TabPane>\n      </Tabs>\n    </Content>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}